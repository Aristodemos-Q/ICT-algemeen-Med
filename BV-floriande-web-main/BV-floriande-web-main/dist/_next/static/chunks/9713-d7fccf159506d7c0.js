"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9713],{646:(t,e,n)=>{n.d(e,{A:()=>a});let a=(0,n(9946).A)("circle-check-big",[["path",{d:"M21.801 10A10 10 0 1 1 17 3.335",key:"yps3ct"}],["path",{d:"m9 11 3 3L22 4",key:"1pflzl"}]])},1007:(t,e,n)=>{n.d(e,{A:()=>a});let a=(0,n(9946).A)("user",[["path",{d:"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",key:"975kel"}],["circle",{cx:"12",cy:"7",r:"4",key:"17ys0d"}]])},3917:(t,e,n)=>{n.d(e,{A:()=>a});let a=(0,n(9946).A)("stethoscope",[["path",{d:"M11 2v2",key:"1539x4"}],["path",{d:"M5 2v2",key:"1yf1q8"}],["path",{d:"M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1",key:"rb5t3r"}],["path",{d:"M8 15a6 6 0 0 0 12 0v-3",key:"x18d4x"}],["circle",{cx:"20",cy:"10",r:"2",key:"ts1r5v"}]])},5339:(t,e,n)=>{n.d(e,{A:()=>a});let a=(0,n(9946).A)("circle-alert",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["line",{x1:"12",x2:"12",y1:"8",y2:"12",key:"1pkeuh"}],["line",{x1:"12",x2:"12.01",y1:"16",y2:"16",key:"4dfq90"}]])},6126:(t,e,n)=>{n.d(e,{E:()=>s});var a=n(5155);n(2115);var i=n(2085),r=n(9434);let o=(0,i.F)("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function s(t){let{className:e,variant:n,...i}=t;return(0,a.jsx)("div",{className:(0,r.cn)(o({variant:n}),e),...i})}},6514:(t,e,n)=>{n.d(e,{E6:()=>o,KV:()=>l,OZ:()=>m,Q$:()=>u,VM:()=>p,Xt:()=>s,eb:()=>c,hm:()=>d});var a=n(6927);function i(t,e){throw console.error("".concat(e,":"),t),t}let r={async getAllPatients(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=a.N.from("patients").select("*").order("created_at",{ascending:!1}).range(n,n+e-1);t.search&&(r=r.or("name.ilike.%".concat(t.search,"%,email.ilike.%").concat(t.search,"%,patient_number.ilike.%").concat(t.search,"%"))),void 0!==t.gp_patient&&(r=r.eq("gp_patient",t.gp_patient)),t.insurance_company&&(r=r.eq("insurance_company",t.insurance_company));let{data:o,error:s}=await r;return s?(i(s,"Error fetching patients"),[]):o||[]},async getPatientById(t){let{data:e,error:n}=await a.N.from("patients").select("*").eq("id",t).single();return n?(i(n,"Error fetching patient ".concat(t)),null):e},async createPatient(t){let{data:e,error:n}=await a.N.from("patients").insert([t]).select().single();if(n)throw i(n,"Error creating patient"),n;return e},async updatePatient(t,e){let{data:n,error:r}=await a.N.from("patients").update(e).eq("id",t).select().single();if(r)throw i(r,"Error updating patient ".concat(t)),r;return n},async getRecentPatients(){let{data:t,error:e}=await a.N.from("patients").select("*").order("created_at",{ascending:!1}).limit(10);return e?(i(e,"Error fetching recent patients"),[]):t||[]}},o={async getAppointments(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=a.N.from("appointments").select("\n        *,\n        patient:patients(*),\n        doctor:users!appointments_doctor_id_fkey(*),\n        appointment_type:appointment_types(*),\n        location:practice_locations(*)\n      ").order("scheduled_at",{ascending:!0});t.date_from&&(e=e.gte("scheduled_at",t.date_from)),t.date_to&&(e=e.lte("scheduled_at",t.date_to)),t.doctor_id&&(e=e.eq("doctor_id",t.doctor_id)),t.patient_id&&(e=e.eq("patient_id",t.patient_id)),t.status&&(e=e.eq("status",t.status));let{data:n,error:r}=await e;return r?(i(r,"Error fetching appointments"),[]):n||[]},async getTodaysAppointments(){let t=new Date().toISOString().split("T")[0];return this.getAppointments({date_from:t+"T00:00:00",date_to:t+"T23:59:59"})},async getUpcomingAppointments(){let t=new Date,e=new Date(t.getTime()+6048e5);return this.getAppointments({date_from:t.toISOString(),date_to:e.toISOString()})},async createAppointment(t){let{data:e,error:n}=await a.N.from("appointments").insert([t]).select("\n        *,\n        patient:patients(*),\n        doctor:users!appointments_doctor_id_fkey(*),\n        appointment_type:appointment_types(*),\n        location:practice_locations(*)\n      ").single();if(n)throw i(n,"Error creating appointment"),n;return e},async updateAppointmentStatus(t,e){let{data:n,error:r}=await a.N.from("appointments").update({status:e}).eq("id",t).select("\n        *,\n        patient:patients(*),\n        doctor:users!appointments_doctor_id_fkey(*),\n        appointment_type:appointment_types(*),\n        location:practice_locations(*)\n      ").single();if(r)throw i(r,"Error updating appointment ".concat(t)),r;return n},async getByPatientEmail(t){let{data:e,error:n}=await a.N.from("appointments").select("\n        *,\n        patient:patients(*),\n        doctor:users!appointments_doctor_id_fkey(*),\n        appointment_type:appointment_types(*),\n        location:practice_locations(*)\n      ").eq("patient_email",t).order("scheduled_at",{ascending:!1});return n?(i(n,"Error fetching appointments for patient ".concat(t)),[]):e||[]}},s={async getAllRequests(){let{data:t,error:e}=await a.N.from("appointment_requests").select("\n        *,\n        appointment_type:appointment_types(*),\n        processed_by_user:users(*)\n      ").order("created_at",{ascending:!1});return e?(i(e,"Error fetching appointment requests"),[]):t||[]},async getPendingRequests(){let{data:t,error:e}=await a.N.from("appointment_requests").select("\n        *,\n        appointment_type:appointment_types(*)\n      ").eq("status","pending").order("urgency",{ascending:!1}).order("created_at",{ascending:!0});return e?(i(e,"Error fetching pending appointment requests"),[]):t||[]},async createRequest(t){let{data:e,error:n}=await a.N.from("appointment_requests").insert([{patient_name:t.patient_name,patient_email:t.patient_email,patient_phone:t.patient_phone,patient_birth_date:t.patient_birth_date,appointment_type_id:t.appointment_type_id,preferred_date:t.preferred_date,preferred_time:t.preferred_time,alternative_dates:t.alternative_dates,chief_complaint:t.chief_complaint,urgency:t.urgency,status:"pending"}]).select("\n        *,\n        appointment_type:appointment_types(*)\n      ").single();if(n)throw i(n,"Error creating appointment request"),n;return e},async processRequest(t,e,n,r){let o={status:e,processed_by:n,processed_at:new Date().toISOString()};r&&(o.rejection_reason=r);let{data:s,error:c}=await a.N.from("appointment_requests").update(o).eq("id",t).select("\n        *,\n        appointment_type:appointment_types(*),\n        processed_by_user:users(*)\n      ").single();if(c)throw i(c,"Error processing appointment request ".concat(t)),c;return s}},c={async getActiveTypes(){let{data:t,error:e}=await a.N.from("appointment_types").select("*").eq("is_active",!0).order("name");return e?(i(e,"Error fetching appointment types"),[]):t||[]}},p={async getAllLocations(){let{data:t,error:e}=await a.N.from("practice_locations").select("*").order("is_main_location",{ascending:!1}).order("name");return e?(i(e,"Error fetching practice locations"),[]):t||[]},async getMainLocation(){let{data:t,error:e}=await a.N.from("practice_locations").select("*").eq("is_main_location",!0).single();return e?(i(e,"Error fetching main practice location"),null):t}},d={async getDashboardStats(){try{let{count:t}=await a.N.from("patients").select("*",{count:"exact",head:!0}),e=new Date().toISOString().split("T")[0],{count:n}=await a.N.from("appointments").select("*",{count:"exact",head:!0}).gte("scheduled_at",e+"T00:00:00").lt("scheduled_at",e+"T23:59:59"),{count:i}=await a.N.from("appointment_requests").select("*",{count:"exact",head:!0}).eq("status","pending"),s=new Date;s.setDate(s.getDate()-s.getDay());let{count:c}=await a.N.from("appointments").select("*",{count:"exact",head:!0}).eq("status","completed").gte("scheduled_at",s.toISOString()),p=await o.getUpcomingAppointments(),d=await r.getRecentPatients();return{total_patients:t||0,total_appointments_today:n||0,pending_requests:i||0,completed_appointments_this_week:c||0,upcoming_appointments:p.slice(0,5),recent_patients:d.slice(0,5)}}catch(t){return i(t,"Error fetching dashboard statistics"),{total_patients:0,total_appointments_today:0,pending_requests:0,completed_appointments_this_week:0,upcoming_appointments:[],recent_patients:[]}}}},l={async getAvailableTimeSlots(t){try{let e=new Date(t.date).getDay()||7,n=a.N.from("doctor_schedules").select("\n          *,\n          doctor:users!doctor_schedules_doctor_id_fkey(id, name),\n          location:practice_locations(*)\n        ").eq("day_of_week",e).eq("is_active",!0);t.doctor_id&&(n=n.eq("doctor_id",t.doctor_id)),t.location_id&&(n=n.eq("location_id",t.location_id));let{data:r,error:o}=await n;if(o)return i(o,"Error fetching doctor schedules"),[];let{data:s,error:c}=await a.N.from("appointments").select("scheduled_at, end_time, doctor_id").gte("scheduled_at",t.date+"T00:00:00").lt("scheduled_at",t.date+"T23:59:59").neq("status","cancelled");if(c)return i(c,"Error fetching existing appointments"),[];let{data:p,error:d}=await a.N.from("appointment_types").select("duration_minutes").eq("id",t.appointment_type_id).single();if(d)return i(d,"Error fetching appointment type"),[];let l=[],m=p.duration_minutes||15;return null==r||r.forEach(e=>{let n=e.start_time,a=e.end_time,i=e.break_start,r=e.break_end;for(let c=parseInt(n.split(":")[0]);c<parseInt(a.split(":")[0]);c++)for(let n=0;n<60;n+=15){var o;let a="".concat(c.toString().padStart(2,"0"),":").concat(n.toString().padStart(2,"0"));if(i&&r&&a>=i&&a<r)continue;let p="".concat(t.date,"T").concat(a,":00"),d=new Date(new Date(p).getTime()+6e4*m),_=null==s?void 0:s.some(t=>{let n=new Date(t.scheduled_at),a=new Date(t.end_time);return t.doctor_id===e.doctor_id&&(new Date(p)>=n&&new Date(p)<a||d>n&&d<=a)});l.push({time:a,available:!_,doctor_id:e.doctor_id,doctor_name:null==(o=e.doctor)?void 0:o.name,appointment_type_id:t.appointment_type_id})}}),l.sort((t,e)=>t.time.localeCompare(e.time))}catch(t){return i(t,"Error generating available time slots"),[]}}},m={async logAutomationProcess(t){let{data:e,error:n}=await a.N.from("automation_logs").insert([{...t,created_at:new Date().toISOString()}]).select().single();if(n)throw i(n,"Error logging automation process"),n;return e},async updateAutomationStatus(t,e,n,r){let o={status:e,completed_at:new Date().toISOString()};n&&(o.result=n),r&&(o.error_message=r);let{data:s,error:c}=await a.N.from("automation_logs").update(o).eq("id",t).select().single();if(c)throw i(c,"Error updating automation status"),c;return s}},_={async sendAppointmentConfirmation(t){try{var e,n,a,i;let r=await m.logAutomationProcess({process_type:"email_notification",entity_id:t,status:"processing"}),s=await o.getAppointments({});if(!s.length)return await m.updateAutomationStatus(r.id,"failed",null,"Appointment not found"),!1;let c=s[0],p={to:(null==(e=c.patient)?void 0:e.email)||"",subject:"Afspraak bevestiging - MedCheck+",template:"appointment_confirmation",data:{patient_name:null==(n=c.patient)?void 0:n.name,appointment_date:c.scheduled_at,doctor_name:null==(a=c.doctor)?void 0:a.name,location_name:null==(i=c.location)?void 0:i.name}};return console.log("Sending email:",p),await new Promise(t=>setTimeout(t,1e3)),await m.updateAutomationStatus(r.id,"completed",{email_sent:!0,recipient:p.to}),!0}catch(t){return console.error("Email sending failed:",t),!1}},async sendAppointmentReminder(t){try{let e=await m.logAutomationProcess({process_type:"reminder",entity_id:t,status:"processing"});return console.log("Sending reminder for appointment ".concat(t)),await m.updateAutomationStatus(e.id,"completed",{reminder_sent:!0}),!0}catch(t){return console.error("Reminder sending failed:",t),!1}},async sendStaffNotification(t,e){try{let n=await m.logAutomationProcess({process_type:"email_notification",entity_id:e.id||"unknown",status:"processing"});return console.log("Sending staff notification of type ".concat(t),e),await m.updateAutomationStatus(n.id,"completed",{notification_type:t,data:e}),!0}catch(t){return console.error("Staff notification failed:",t),!1}}},u={...o,async createAppointmentFromRequest(t,e){try{let{data:n,error:i}=await a.N.from("appointment_requests").select("*").eq("id",t).single();if(i)throw i;let r=n.patient_id;if(!r){let{data:t,error:e}=await a.N.from("patients").insert([{name:n.patient_name,email:n.patient_email,phone:n.patient_phone,birth_date:n.patient_birth_date,gp_patient:!1}]).select().single();if(e)throw e;r=t.id}let{data:s,error:c}=await a.N.from("appointment_types").select("duration_minutes").eq("id",n.appointment_type_id).single();if(c)throw c;let p=new Date("".concat(n.preferred_date,"T").concat(n.preferred_time||"09:00",":00")),d=new Date(p.getTime()+6e4*s.duration_minutes),l={patient_id:r,doctor_id:e,appointment_type_id:n.appointment_type_id,scheduled_at:p.toISOString(),chief_complaint:n.chief_complaint},m=await o.createAppointment({...l,end_time:d.toISOString(),status:"scheduled",follow_up_needed:!1});return await a.N.from("appointment_requests").update({status:"scheduled",processed_at:new Date().toISOString(),processed_by:e}).eq("id",t),await _.sendAppointmentConfirmation(m.id),m}catch(t){throw i(t,"Error creating appointment from request"),t}}}},6695:(t,e,n)=>{n.d(e,{BT:()=>p,Wu:()=>d,ZB:()=>c,Zp:()=>o,aR:()=>s,wL:()=>l});var a=n(5155),i=n(2115),r=n(9434);let o=i.forwardRef((t,e)=>{let{className:n,...i}=t;return(0,a.jsx)("div",{ref:e,className:(0,r.cn)("rounded-lg border bg-card text-card-foreground shadow-sm",n),...i})});o.displayName="Card";let s=i.forwardRef((t,e)=>{let{className:n,...i}=t;return(0,a.jsx)("div",{ref:e,className:(0,r.cn)("flex flex-col space-y-1.5 p-6",n),...i})});s.displayName="CardHeader";let c=i.forwardRef((t,e)=>{let{className:n,...i}=t;return(0,a.jsx)("h3",{ref:e,className:(0,r.cn)("text-2xl font-semibold leading-none tracking-tight",n),...i})});c.displayName="CardTitle";let p=i.forwardRef((t,e)=>{let{className:n,...i}=t;return(0,a.jsx)("p",{ref:e,className:(0,r.cn)("text-sm text-muted-foreground",n),...i})});p.displayName="CardDescription";let d=i.forwardRef((t,e)=>{let{className:n,...i}=t;return(0,a.jsx)("div",{ref:e,className:(0,r.cn)("p-6 pt-0",n),...i})});d.displayName="CardContent";let l=i.forwardRef((t,e)=>{let{className:n,...i}=t;return(0,a.jsx)("div",{ref:e,className:(0,r.cn)("flex items-center p-6 pt-0",n),...i})});l.displayName="CardFooter"},9074:(t,e,n)=>{n.d(e,{A:()=>a});let a=(0,n(9946).A)("calendar",[["path",{d:"M8 2v4",key:"1cmpym"}],["path",{d:"M16 2v4",key:"4m81vk"}],["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",key:"1hopcy"}],["path",{d:"M3 10h18",key:"8toen8"}]])}}]);